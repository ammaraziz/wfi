import sys, os

from os.path import join
include: "rules/common.smk"
configfile: "config/config.yaml"

INDIR = config["input_dir"]
OUTDIR = config["output_dir"]
ORG = config["organism"].upper()
PLATFORM = config["technology"].lower()
SECONDARY = config["secondary_assembly"]
SUBSET = config["subset"]
#basedir = workflow.current_basedir

print(workflow.cores, workflow.nodes)

if 'use_conda' in config and config['use_conda']:
    workflow._use_conda = True

##### setup samples #####
if PLATFORM == 'illumina':
    SAMPLE_NAME, SAMPLE_NUMBER, _, PAIR = glob_wildcards(INDIR + "/{sample_name}_{sample_number}_L{lane_number}_{pair}_001.fastq.gz")
    SAMPLES = [i + "_" + x for i, x in zip(SAMPLE_NAME, SAMPLE_NUMBER)]
    RUNMODE = 'paired'
elif PLATFORM == 'ont':
    SAMPLE_NAME = glob_wildcards(INDIR + config['pattern_ont'])[0]
    SAMPLES = SAMPLE_NAME
    RUNMODE = 'single'
elif PLATFORM == 'pgm':
    SAMPLE_NAME = glob_wildcards(INDIR + config['pattern_pgm'])[0]
    SAMPLES = SAMPLE_NAME
    RUNMODE = 'single'

if RUNMODE == 'paired':
    MODE = [
        expand(OUTDIR + "qualtrim/{sample}.R1.fastq", sample = SAMPLES),
        expand(OUTDIR + "qualtrim/{sample}.R2.fastq", sample = SAMPLES)
    ]
if RUNMODE == 'single':
    MODE = [
        expand(OUTDIR + "qualtrim/{sample}.fastq", sample = SAMPLES)
    ]

##### org setup #####
if ORG == 'FLU':
    if PLATFORM == 'illumina':
        if SECONDARY is True:
            IRMAMODULE = 'FLU-secondary'
        else:
            IRMAMODULE = 'FLU'
    elif PLATFORM == 'ont' and SECONDARY == False:
        IRMAMODULE = 'FLU-minion'
    elif PLATFORM == 'pgm' and SECONDARY == False:
        IRMAMODULE = 'FLU-pgm'
    else:
        sys.exit(
            f'Assembly module unknown. Check config for options:\n'
            f'organism {ORG}\n' 
            f'secondary_assembly {SECONDARY}\n'
            f'techology {PLATFORM}'
            )
    
    # trim org settings just for flu
    TRIM = config["trim_org"]

    # gene segment settings
    if SUBSET is True:
        SEGTOKEEP = "subset"
    elif SUBSET is False:
        SEGTOKEEP = "all"
    else:
        sys.exit("Check config file for 'subset' param. If unsure set to: False")

elif ORG == 'RSV':
    TRIM = ""
    SEGTOKEEP = "rsv"
    if PLATFORM == 'illumina': 
        if SECONDARY is True:
            IRMAMODULE = 'RSV-secondary'
        else:
            IRMAMODULE = 'RSV'
    elif PLATFORM and SECONDARY is False:
        IRMAMODULE = 'RSV-minion'
    else:
        sys.exit(
            f'Assembly module unknown. Check config for options:\n'
            f'organism {ORG}\n' 
            f'secondary_assembly {SECONDARY}\n'
            f'techology {PLATFORM}'
            )

else:
    raise ValueError("Check config file for 'organism' setting. Options are: FLU or RSV")

##### Messesges #####
onstart:
    print("Run mode: " + RUNMODE)
    print("Sequence Technology: " + PLATFORM)
    print("Organism: " + ORG)
    print("IRMA Module: " + IRMAMODULE)
    print("Secondary Assembly: " + str(SECONDARY))

onsuccess:
    print("\n")
    print("\033[1m\033[92mSuccess! Check assembles/ folder for results.\033[0m")

onerror:
    print("\n")
    print("\033[1m\033[96m Error detected. READ THE ERROR, check output folder first\033[0m")

##### Target rules #####
rule all:
    input:
        # singe or paired
        MODE,
        # status
        expand(OUTDIR + "status/filter_{sample}.txt", sample = SAMPLES),
        expand(OUTDIR + "status/irma_{sample}.txt", sample = SAMPLES),
        join(OUTDIR + "status/subtyping_complete.txt"),
        join(OUTDIR + "status/plotting_complete.txt")

##### Modules #####
#include: "rules/ref.smk"
if RUNMODE == 'single':
    include: "rules/single.smk"
if RUNMODE == 'paired':
    include: "rules/paired.smk"

include: "rules/report.smk"