import sys, os
from os.path import join
from pathlib import Path

include: "rules/common.smk"
configfile: "config/config.yaml"

INDIR = Path(config["input_dir"])
OUTDIR = Path(config["output_dir"])
WORKDIR =  Path(config["output_dir"]) / "workdir"
ORG = config["organism"].upper()
PLATFORM = config["technology"].lower()
SECONDARY = config["secondary_assembly"]
ADAPTERS = config['adapters']
SUBSET = config["subset"]
MASKDEPTH = config['maskdepth']
TRIMMODE = config["trim_prog"]
SAMPLESHEET = config["sample_sheet"]

if 'use_conda' in config and config['use_conda']:
    workflow._use_conda = True

##### setup samples #####
if PLATFORM == 'illumina':
    #SAMPLE_NAME, SAMPLE_NUMBER, _, PAIR = glob_wildcards(INDIR / "{sample_name}_{sample_number}_L{lane_number}_{pair}_001.fastq.gz")
    #SAMPLES = [i + "_" + x for i, x in zip(set(SAMPLE_NAME), SAMPLE_NUMBER)]
    RUNMODE = 'paired'
    dictReads = parseSamples(SAMPLESHEET)
    SAMPLES = list(dictReads.keys())

elif PLATFORM == 'ont':
    SAMPLE_NAME = glob_wildcards(INDIR / config['pattern_ont'])[0]
    SAMPLES = SAMPLE_NAME
    RUNMODE = 'single'

elif PLATFORM == 'pgm':
    SAMPLE_NAME = glob_wildcards(INDIR / config['pattern_pgm'])[0]
    SAMPLES = SAMPLE_NAME
    RUNMODE = 'single'

##### org setup #####
if ORG == 'FLU':
    if SUBSET is True:
        SEGTOKEEP = "subset"
    elif SUBSET is False:
        SEGTOKEEP = "all"
    else:
        sys.exit("Check config file for 'subset' param. If unsure set to: False")

elif ORG == 'RSV':
    SEGTOKEEP = "rsv"
else:
    raise ValueError("Check config file for 'organism' setting. Options are: FLU or RSV")

try:
    IRMAMODULE = get_irma_module_config(org = ORG, technology = PLATFORM, secondary = SECONDARY)
except Exception as e:
    print(
        f'Settings not possible. IRMA module does not fit critera. Check config for options:\n'
        f'\torganism {ORG}\n' 
        f'\tsecondary_assembly {SECONDARY}\n'
        f'\ttechology {PLATFORM}\n'
        f'\t{e}'
        )
    sys.exit(1)

##### Messesges #####
onstart:
    print("Run mode: " + RUNMODE)
    print("Sequence Technology: " + PLATFORM)
    print("Organism: " + ORG)
    print("IRMA Module: " + IRMAMODULE)
    print("Secondary Assembly: " + str(SECONDARY))

onsuccess:
    print("\n")
    print("\033[1m\033[92mSuccess! Check assembles/ folder for results.\033[0m")

onerror:
    print("\n")
    print("\033[1m\033[96m Error detected. PLEASE READ THE ERROR then check output folder first\033[0m")

##### Target rules #####
rule all:
    input:
        expand(WORKDIR / "status" / "fastp_{sample}.txt", sample = SAMPLES),
        expand(WORKDIR / "status" / "irma_{sample}.txt", sample = SAMPLES),
        expand(WORKDIR / "status" / "parse_{sample}.txt", sample = SAMPLES),
        expand(WORKDIR / "status" / "mask_{sample}.txt", sample = SAMPLES),
        expand(WORKDIR / "status" / "plot_{sample}.txt", sample = SAMPLES),
        #OUTDIR / "status/subtyping_complete.txt",
        #OUTDIR / "status/plotting_complete.txt",

##### Modules #####
#include: "rules/ref.smk"
if RUNMODE == 'single':
    include: "rules/trim_se.smk"
    include: "rules/irma_se.smk"
if RUNMODE == 'paired':
    if TRIMMODE == "standard":
        include: "rules/trim_pe.smk"
    if TRIMMODE == "tiled":
        include: "rules/trim_tiled.smk"
    include: "rules/irma_pe.smk"
include: "rules/irma_parse.smk"
include: "rules/mask.smk"
include: "rules/report.smk"